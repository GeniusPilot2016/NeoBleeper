<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="comboBoxMicrocontroller.Items1" xml:space="preserve">
    <value>Raspberry Pi (py file)</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="buttonCopyFirmwareToClipboard.Size" type="System.Drawing.Size, System.Drawing">
    <value>197, 26</value>
  </data>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="buttonCopyFirmwareToClipboard.ImageIndex" type="System.Int32, mscorlib">
    <value>1</value>
  </data>
  <data name="$this.AutoSize" type="System.Boolean, mscorlib">
    <value>True</value>
  </data>
  <data name="&gt;&gt;icons.Name" xml:space="preserve">
    <value>icons</value>
  </data>
  <data name="label1.Location" type="System.Drawing.Point, System.Drawing">
    <value>235, 9</value>
  </data>
  <data name="&gt;&gt;comboBoxMicrocontroller.Type" xml:space="preserve">
    <value>System.Windows.Forms.ComboBox, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="comboBoxMicrocontroller.Size" type="System.Drawing.Size, System.Drawing">
    <value>177, 23</value>
  </data>
  <data name="&gt;&gt;$this.Name" xml:space="preserve">
    <value>GetFirmwareWindow</value>
  </data>
  <data name="panel1.TabIndex" type="System.Int32, mscorlib">
    <value>4</value>
  </data>
  <data name="$this.ClientSize" type="System.Drawing.Size, System.Drawing">
    <value>800, 444</value>
  </data>
  <data name="&gt;&gt;buttonCopyFirmwareToClipboard.ZOrder" xml:space="preserve">
    <value>1</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="buttonCopyFirmwareToClipboard.TextImageRelation" type="System.Windows.Forms.TextImageRelation, System.Windows.Forms">
    <value>ImageBeforeText</value>
  </data>
  <data name="buttonCopyFirmwareToClipboard.Text" xml:space="preserve">
    <value>Copy Firmware to Clipboard</value>
  </data>
  <data name="richTextBoxFirmware.Location" type="System.Drawing.Point, System.Drawing">
    <value>12, 36</value>
  </data>
  <data name="&gt;&gt;richTextBoxFirmware.ZOrder" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="buttonCopyFirmwareToClipboard.Font" type="System.Drawing.Font, System.Drawing">
    <value>HarmonyOS Sans, 9pt</value>
  </data>
  <data name="label1.ImageAlign" type="System.Drawing.ContentAlignment, System.Drawing">
    <value>MiddleLeft</value>
  </data>
  <data name="label1.ImageIndex" type="System.Int32, mscorlib">
    <value>0</value>
  </data>
  <data name="&gt;&gt;richTextBoxFirmware.Type" xml:space="preserve">
    <value>System.Windows.Forms.RichTextBox, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="richTextBoxFirmware.TabIndex" type="System.Int32, mscorlib">
    <value>2</value>
  </data>
  <data name="richTextBoxFirmware.Font" type="System.Drawing.Font, System.Drawing">
    <value>Courier New, 9pt</value>
  </data>
  <data name="comboBoxMicrocontroller.TabIndex" type="System.Int32, mscorlib">
    <value>1</value>
  </data>
  <data name="&gt;&gt;richTextBoxFirmware.Name" xml:space="preserve">
    <value>richTextBoxFirmware</value>
  </data>
  <data name="comboBoxMicrocontroller.Items" xml:space="preserve">
    <value>Arduino (ino file)</value>
  </data>
  <data name="$this.AutoScaleDimensions" type="System.Drawing.SizeF, System.Drawing">
    <value>96, 96</value>
  </data>
  <data name="comboBoxMicrocontroller.Items2" xml:space="preserve">
    <value>ESP32 (ino file)</value>
  </data>
  <data name="richTextBoxFirmware.Text" xml:space="preserve">
    <value>#include &lt;Arduino.h&gt;

void setup() {
  Serial.begin(9600);
  pinMode(8, OUTPUT); // Buzzer pin
  pinMode(9, OUTPUT); // Motor direction pin
  pinMode(10, OUTPUT); // Motor step pin
}

void loop() {
  if (Serial.available() &gt; 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command == "IDENTIFY") {
      Serial.println("Arduino");
    } 
    else if (command.startsWith("MOTOR:")) {
      int rpm = command.substring(6).toInt();
      if (rpm &gt; 0) {
        // Convert RPM to step delay
        unsigned long stepDelay = 60000000UL / (rpm * 200); // 200 steps per revolution
        
        // Set motor direction
        digitalWrite(9, HIGH);
        
        // Start stepping motor
        for (int i = 0; i &lt; 200; i++) {
          digitalWrite(10, HIGH);
          delayMicroseconds(stepDelay / 2);
          digitalWrite(10, LOW);
          delayMicroseconds(stepDelay / 2);
        }
        
        Serial.print("Motor running at RPM: ");
        Serial.println(rpm);
      }
    } 
    else if (command.startsWith("BUZZER:")) {
      int frequency = command.substring(7).toInt();
      if (frequency &gt; 0 &amp;&amp; frequency &lt;= 20000) {
        tone(8, frequency);
        Serial.print("Buzzer playing at frequency: ");
        Serial.println(frequency);
      }
    } 
    else if (command == "STOP:MOTOR") {
      digitalWrite(9, LOW);
      digitalWrite(10, LOW);
      Serial.println("Motor stopped");
    } 
    else if (command == "STOP:BUZZER") {
      noTone(8);
      Serial.println("Buzzer stopped");
    }
  }
}</value>
  </data>
  <data name="&gt;&gt;comboBoxMicrocontroller.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="buttonCopyFirmwareToClipboard.Location" type="System.Drawing.Point, System.Drawing">
    <value>302, 411</value>
  </data>
  <data name="&gt;&gt;label1.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;label1.Type" xml:space="preserve">
    <value>System.Windows.Forms.Label, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="icons.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAEZTeXN0ZW0uV2luZG93cy5Gb3JtcywgQ3VsdHVyZT1uZXV0cmFs
        LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAAAmU3lzdGVtLldpbmRvd3MuRm9ybXMu
        SW1hZ2VMaXN0U3RyZWFtZXIBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAEg8AAAJNU0Z0AUkBTAIBAQIB
        AAFcAQABeAEAARQBAAEUAQAE/wEhARAI/wFCAU0BNgcAATYDAAEoAwABUAMAARQDAAEBAQABIAYAARmG
        AAMvAUkDPAFmAzwBZgM8AWYDPAFmAzwBZgM8AWYDPAFmAyYBOP8ABQADCQEMAVkCXAHDA10BzANdAcwD
        XQHMAl8BWwHTAeQBowEeAf8B5AGjAR4C/wHmAVAC/wHmAVAB/wHkAaMBHwL/AeYBUAL/AeYBUAH/AeQB
        ogEeAf8B5AGiAR4B/wJBAUABcawAAxwBJwMjATMDIwEzAyMBMwMjATMDIwEzAyMBMwMjATMDIwEzAyMB
        MwMjATMDIwEzAyMBMwMjATMDIwEzAyMBMwMJAQwQAAMjATMBfAGZAcEB/wPPAf8DzwH/A88B/wHaAZQB
        FwH/AfABxQE5Av8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAf8B4QGkASIB
        /wFeAl0BzKwAAUABiAEgAf0BSAFyASIB/wFHAYgBDAH/AUcBiAEMAf8BRgGHAQsB/wFGAYcBCwH/AUUB
        hgELAf8BRQGGAQoB/wFFAYUBCgH/AUQBhQEKAf8BRAGEAQkB/wFDAYQBCQH/AUMBgwEJAf8BQwGDAQkB
        /wFCAYIBCAH/AUYBaAEmAf8BWQFcAVkBwxAAAyMBMwGgAbYB1gH/A/MB/wPzAf8D8wH/AfMByQE7Af8B
        +gHbAUgC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAB/wH2Ac8BQAH/Al4B
        XQHMrAABSgGMAQ4B/wFJAYsBDQH/AT8BYAEhAf8DNwH/ATYBOwExAf8BRwGHAQwB/wFLAZcBOQH/AVsB
        1AL/AVgB0wL/AVMB0gL/AU0BzwH+Af8BSQHOAf4B/wFDAcwB/gH/ATwBygH+Af8BRAGFAQoB/wFEAYQB
        CQH/Al0BXAHMEAADIwEzAaUBuwHbAf8D8wH/A/MB/wPzAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B
        5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAf8BXwFeAV0BzKwAAUwBjgEPAf8BSwGOAQ8B
        /wFDAVsBLQH/A0AB/wM9Af8BSQGKAQ4B/wFJAYsBDQH/AUkBiwENAf8BSQGKAQ0B/wFIAYoBDQH/AUgB
        iQEMAf8BRwGJAQwB/wFHAYkBDAH/AUcBiAELAf8BRgGIAQsB/wFGAYcBCwH/A10BzBAAAyMBMwGmAbwB
        2wH/A/MB/wPzAf8D8wH/AeEBnQEbAf8B8wHJATsC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC
        /wHmAVAC/wHmAVAB/wHnAawBJgH/AV4CXQHMrAABTgGSAREB/wFOAZEBEQH/AUkBaAEsAf8DSAH/AUYB
        SgFCAf8BSwGNARAB/wFsAZsBHwH/AfkBzQFhAf8B9wHJAVsB/wH1AcYBVQH/AfQBwgFPAf8B8QG+AUkB
        /wHwAboBQwH/Ae4BtgE9Af8BSQGLAQ0B/wFJAYoBDQH/A10BzBAAAyMBMwGmAbwB3AH/A/MB/wPzAf8D
        8wH/AfkB2AFGAf8B/QHgAUwC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAB
        /wH6AdsBSAH/Al4BXQHMrAABUAGUARMB/wFQAZQBEgH/AVABkwESAf8BTwGTARIB/wFPAZIBEQH/AU4B
        kgERAf8BTgGRAREB/wFOAZEBEQH/AU0BkAEQAf8BTQGQARAB/wFMAY8BEAH/AUwBjwEPAf8BTAGOAQ8B
        /wFLAY4BDwH/AUsBjQEPAf8BSgGNAQ4B/wNdAcwQAAMjATMBpwG9AdwB/wPzAf8D8wH/A/MC/wHmAVAC
        /wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAC/wHmAVAB/wFfAV4B
        XQHMrAABUwGXARUB/wFTAZcBFAH/AUABswGcAf8BUgGWARQB/wE0AcYB9wH/AVEBlQETAf8BOgG8AckB
        /wFQAZQBEwH/AU0BjgERAf8BPwFYASgB/wE9AVcBJwH/AT0BVgEmAf8BPAFVASUB/wE/AWIBIAH/AU4B
        kAERAf8BTQGQARAB/wNdAcwQAAMjATMBpwG9Ad0B/wPzAf8D8wH/A/MB/wHhAZwBGgH/AfMByQE7Av8B
        5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAf8B5wGrASUB/wFeAl0BzKwAAVUB
        mgEWAf8BVQGaARYB/wFLAbgBoQH/AVQBmQEVAf8BRQHNAf4B/wFTAZgBFQH/AUgBwgHPAf8BUgGWARQB
        /wFMAYwBEwH/AzsB/wM6Af8DOQH/AzcB/wM2Af8BUAGTARIB/wFPAZMBEgH/A10BzBAAAyMBMwGnAb0B
        3QH/A/MB/wPzAf8D8wL/AeYBUAL/AeYBUAL/AeYBUAL/AeYBUAL/AeYBUAL/AeYBUAL/AeYBUAL/AeYB
        UAL/AeYBUAL/AeYBUAH/AV8BXgFdAcysAAFXAZ0BFwH/AVcBnAEXAf8BVAG8AaIB/wFWAZsBFgH/AVIB
        0QL/AVUBmgEWAf8BUgHGAdAB/wFUAZkBFQH/AU4BjwEUAf8DPwH/Az4B/wM9Af8DPAH/AzsB/wFRAZYB
        EwH/AVEBlQETAf8DXQHMEAADIwEzAagBvgHeAf8D8wH/A/MB/wPzAv8B5gFQAv8B5gFQAv8B5gFQAv8B
        5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAf8BXwFeAV0BzKwAAVoBoAEZAf8B
        WQGfARkB/wFbAb8BowH/AVkBngEZAf8BXQHVAv8BWAGdARgB/wFbAcoB0QH/AVcBnAEXAf8BUQGRARUB
        /wNEAf8DQwH/A0EB/wNAAf8DPwH/AVQBmQEVAf8BVAGYARUB/wNdAcwQAAMjATMBqQG/Ad4B/wPzAf8D
        8wH/A/MB/wHgAZsBGgH/AfMByAE6Av8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B5gFQAv8B
        5gFQAf8B5wGqASUB/wFeAl0BzKwAAVwBogEbAf8BWwGiARsB/wFhAcIBpAH/AVoBoQEaAf8BZQHXAv8B
        WgGgARkB/wFiAcwB0QH/AVkBnwEZAf8BUgGTARYB/wNIAf8DRwH/AUYBVQFbAf8BRwF0AYQB/wNDAf8B
        VgGbARcB/wFWAZsBFgH/A10BzBAAAyMBMwGpAb8B3wH/A/MB/wPzAf8D8wH/AdEBkAEfAf8B6gG7ATMB
        /wH6AdoBRwL/AeYBUAL/AeYBUAH/AfoB2gFIAv8B5gFQAv8B5gFQAf8B+gHaAUcB/wHZAZwBHgH/A1oB
        v6wAAV4BpgEdAf8BXgGlARwB/wFkAcIBngH/AV0BpAEcAf8BZwHWAfUB/wFcAaMBGwH/AWUBywHJAf8B
        XAGiARsB/wFYAZwBGgH/AVEBdwEsAf8BUAF3ASwB/wFQAXYBLAH/AU8BdQEqAf8BUAF9ASYB/wFZAZ8B
        GQH/AVgBngEZAf8DXQHMEAADIwEzAakBvwHfAf8D8wH/A/MB/wPzAf8B6gHnAd8B/wHmAbUBRgH/AegB
        rAEmAv8B5gFQAv8B5gFQAf8B6AGsASUC/wHmAVAC/wHmAVAB/wHoAasBJQH/AloBWAG6BAGsAAFgAagB
        HgH/AWABqAEeAf8BXwGnAR4B/wFfAacBHQH/AV8BpgEdAf8BXgGmAR0B/wFeAaUBHQH/AV0BpQEcAf8B
        XQGkARwB/wFdAaQBHAH/AVwBowEbAf8BXAGjARsB/wFbAaIBGwH/AVsBogEaAf8BWwGhARoB/wFaAaEB
        GgH/A10BzBAAAyMBMwGqAcAB3wH/A/MB/wPzAf8D8wH/A/MB/wPzAf8D8wH/A/MB/wPzAf8D8wH/A/MB
        /wPzAf8BNwFuAb4B/7QAAWIBqwEgAf8BZAGBAUsB/wFhAaoBHwH/AWEBqQEfAf8BYQGpAR4B/wHLAcwB
        ygH/AbMBxAGjAf8BewGyAUUB/wFfAacBHQH/AZABYwHqAf8BkgFiAfAB/wGSAWIB8AH/AZIBYgHwAf8B
        XQGkARwB/wFdAaQBHAH/AWQBdQFUAf8DXQHMEAADIwEzAaoBwAHgAf8D8wH/A/MB/wPzAf8D8wH/A/MB
        /wPzAf8D8wH/A/MB/wPzAf8D8wH/A/MB/wE4AW8BvwH/tAACYQFdAc8BZAGtASEB/wFkAa0BIQH/AWQB
        rQEhAf8BYwGsASAB/wPMAf8BtwHFAaoB/wGrAcYBiQH/AWIBqgEfAf8BkgFiAfAB/wGSAWIB8AH/AZIB
        YgHwAf8BkgFiAfAB/wFgAagBHgH/AV8BpwEeAf8BXwGnAR0B/wM0AVMQAAMjATMBqwHBAeEB/wPzAf8D
        8wH/AdAByAHBAf8ByAG9AbQB/wHLAcABtgH/Ac0BwgG5Af8B0AHFAbsB/wHTAcgBvgH/A/MB/wPzAf8D
        8wH/AToBcQHAAf/YAANcAcMDXgHMA14BzAJdAV4BzCAAAxwBJwFAAWwBvgH9AT8BdgHGAf8BPgF1AcUB
        /wGgAaQBrQH/AbwBsgGpAf8BvwG1AawB/wMxAU4BxAG6AbEB/wHIAb0BtAH/ATwBcwHDAf8BPAFzAcIB
        /wE7AXIBwgH/AVsBYwFqAeT/ACEAA0kBhwGDAYEBfgHzAxkBIv8A/wACAAFCAU0BPgcAAT4DAAEoAwAB
        UAMAARQDAAEBAQABAQUAAfAXAAP/AQAD/wH4AQMHAAL/Af4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4B
        AAEBBwABwAEAAR4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4B
        AAEBBwABwAEAAR4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4BAAEBBwABwAEAAR4B
        AAEBBwABwAEAAR4BAAEHBwABwAEAAR4BAAEHBwABwAEAAR4BAAEHBwAB/wHhAf4BAAEHBwAD/wH4Af8H
        AAX/HQAL
</value>
  </data>
  <data name="richTextBoxFirmware.Size" type="System.Drawing.Size, System.Drawing">
    <value>776, 369</value>
  </data>
  <data name="buttonCopyFirmwareToClipboard.Anchor" type="System.Windows.Forms.AnchorStyles, System.Windows.Forms">
    <value>Bottom</value>
  </data>
  <data name="comboBoxMicrocontroller.Location" type="System.Drawing.Point, System.Drawing">
    <value>354, 7</value>
  </data>
  <data name="&gt;&gt;comboBoxMicrocontroller.Name" xml:space="preserve">
    <value>comboBoxMicrocontroller</value>
  </data>
  <data name="&gt;&gt;buttonCopyFirmwareToClipboard.Type" xml:space="preserve">
    <value>System.Windows.Forms.Button, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="comboBoxMicrocontroller.Anchor" type="System.Windows.Forms.AnchorStyles, System.Windows.Forms">
    <value>Top, Left, Right</value>
  </data>
  <data name="buttonCopyFirmwareToClipboard.TabIndex" type="System.Int32, mscorlib">
    <value>3</value>
  </data>
  <data name="&gt;&gt;panel1.Type" xml:space="preserve">
    <value>System.Windows.Forms.Panel, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="richTextBoxFirmware.Anchor" type="System.Windows.Forms.AnchorStyles, System.Windows.Forms">
    <value>Top, Bottom, Left, Right</value>
  </data>
  <data name="label1.Font" type="System.Drawing.Font, System.Drawing">
    <value>HarmonyOS Sans, 9pt</value>
  </data>
  <data name="panel1.Location" type="System.Drawing.Point, System.Drawing">
    <value>775, 419</value>
  </data>
  <data name="label1.Size" type="System.Drawing.Size, System.Drawing">
    <value>113, 16</value>
  </data>
  <data name="label1.TabIndex" type="System.Int32, mscorlib">
    <value>0</value>
  </data>
  <data name="&gt;&gt;richTextBoxFirmware.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;label1.Name" xml:space="preserve">
    <value>label1</value>
  </data>
  <data name="buttonCopyFirmwareToClipboard.TextAlign" type="System.Drawing.ContentAlignment, System.Drawing">
    <value>MiddleRight</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>        Microcontroller</value>
  </data>
  <data name="&gt;&gt;comboBoxMicrocontroller.ZOrder" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="&gt;&gt;panel1.ZOrder" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Get Firmware</value>
  </data>
  <data name="&gt;&gt;$this.Type" xml:space="preserve">
    <value>System.Windows.Forms.Form, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="&gt;&gt;buttonCopyFirmwareToClipboard.Name" xml:space="preserve">
    <value>buttonCopyFirmwareToClipboard</value>
  </data>
  <data name="label1.AutoSize" type="System.Boolean, mscorlib">
    <value>True</value>
  </data>
  <data name="panel1.Size" type="System.Drawing.Size, System.Drawing">
    <value>25, 25</value>
  </data>
  <data name="&gt;&gt;panel1.Name" xml:space="preserve">
    <value>panel1</value>
  </data>
  <data name="&gt;&gt;panel1.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;label1.ZOrder" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="&gt;&gt;buttonCopyFirmwareToClipboard.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;icons.Type" xml:space="preserve">
    <value>System.Windows.Forms.ImageList, System.Windows.Forms, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <metadata name="icons.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.Language" type="System.Globalization.CultureInfo, System.Private.CoreLib, Culture=neutral, PublicKeyToken=7cec85d7bea7798e">
    <value>vi</value>
  </metadata>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>